{
  # FIXME: uncomment the next line if you want to reference your GitHub/GitLab access tokens and other secrets
  # secrets,
  pkgs,
  username,
  nix-index-database,
  ...
}: let
  unstable-packages = with pkgs.unstable; [
    # FIXME: select your core binaries that you always want on the bleeding-edge
    bat
    bottom
    coreutils
    curl
    du-dust
    fd
    findutils
    fx
    git
    git-crypt
    gnutar
    htop
    jq
    killall
    mosh
    procs
    ripgrep
    sd
    tmux
    tree
    unzip
    vim
    wget
    yq
    zip
    # cloud, k8s and CLI tools requested (from unstable)
    azure-cli
    azcopy
    istioctl
    k6
    kubectl
    kubelogin
    helm
    kustomize
    kind
    k3d
    k9s
    kube-bench
    kubectx
    opa
    stern
    yq
    flux
    docker
    gh
    rsync
    openssl
    cilium-cli
    oras
    sops
    step
    powershell
    # .NET development - use latest from unstable
    dotnetCorePackages.sdk_9_0-bin  
  ];

  stable-packages = with pkgs; [
    # FIXME: customize these stable packages to your liking for the languages that you use

    # key tools
    gh # for bootstrapping
    git-credential-manager
    just

    # local dev stuf
    mkcert
    httpie

    # treesitter
    tree-sitter

    # language servers
    nodePackages.vscode-langservers-extracted # html, css, json, eslint
    nodePackages.yaml-language-server
    nil # nix

    openssl

    # formatters and linters
    alejandra # nix
    deadnix # nix
    nodePackages.prettier
    shellcheck
    shfmt
    statix # nix

  # moved to unstable-packages to get latest versions
  ];
in {
  imports = [
    nix-index-database.hmModules.nix-index
  ];

  home.stateVersion = "25.05";

  home = {
    username = "${username}";
    homeDirectory = "/home/${username}";

    sessionVariables.EDITOR = "nvim";
    # FIXME: set your preferred $SHELL
    sessionVariables.SHELL = "/etc/profiles/per-user/${username}/bin/bash";
  };

  home.packages =
    stable-packages
    ++ unstable-packages
    ++
    # FIXME: you can add anything else that doesn't fit into the above two lists in here
    [
      # pkgs.some-package
      # pkgs.unstable.some-other-package
    ];

  programs = {
    home-manager.enable = true;
    nix-index.enable = true;
    nix-index-database.comma.enable = true;

    # FIXME: disable this if you don't want to use the starship prompt
    starship.enable = true;
    starship.settings = {
      aws.disabled = true;
      gcloud.disabled = true;
      kubernetes.disabled = false;
      git_branch.style = "242";
      directory.style = "blue";
      directory.truncate_to_repo = false;
      directory.truncation_length = 8;
      python.disabled = true;
      ruby.disabled = true;
      hostname.ssh_only = false;
      hostname.style = "bold green";
    };

    # FIXME: disable whatever you don't want
    git = {
      enable = true;
      package = pkgs.unstable.git;
      delta.enable = true;
      delta.options = {
        line-numbers = true;
        side-by-side = true;
        navigate = true;
      };
      userEmail = "eric@example.com"; # FIXME: set your git email
      userName = "eric"; #FIXME: set your git username
      extraConfig = {
        # FIXME: uncomment the next lines if you want to be able to clone private https repos
        # url = {
        #   "https://oauth2:${secrets.github_token}@github.com" = {
        #     insteadOf = "https://github.com";
        #   };
        #   "https://oauth2:${secrets.gitlab_token}@gitlab.com" = {
        #     insteadOf = "https://gitlab.com";
        #   };
        # };
        push = {
          default = "current";
          autoSetupRemote = true;
        };
        merge = {
          conflictstyle = "diff3";
        };
        diff = {
          colorMoved = "default";
        };
      };
    };
  };

  # Create a basic ~/.bashrc with aliases and functions converted from the previous fish config
  home.file."/.bashrc".text = ''
# ~/.bashrc (generated by flake)
export EDITOR="nvim"

# Aliases
alias jvim='nvim'
alias lvim='nvim'
alias pbcopy='/mnt/c/Windows/System32/clip.exe'
alias pbpaste="/mnt/c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe -command \"Get-Clipboard\""
alias explorer='/mnt/c/Windows/explorer.exe'
alias k=kubectl
complete -F __start_kubectl k

# Functions
refresh() { source "$HOME/.bashrc"; }
take() { mkdir -p -- "$1" && cd -- "$1"; }
ttake() { cd "$(mktemp -d)"; }
show_path() { echo "$PATH" | tr ':' '\n'; }
posix_source() {
  while IFS= read -r i; do
    IFS='=' read -r name val <<<"$i"
    export "$name"="$val"
  done < "$1"
}

# Load completions for installed tooling
if command -v kubectl >/dev/null 2>&1; then
  source <(kubectl completion bash) 2>/dev/null || true
fi
if command -v helm >/dev/null 2>&1; then
  source <(helm completion bash) 2>/dev/null || true
fi
if command -v flux >/dev/null 2>&1; then
  source <(flux completion bash) 2>/dev/null || true
fi
if command -v istioctl >/dev/null 2>&1; then
  source <(istioctl completion bash) 2>/dev/null || true
fi
if command -v k9s >/dev/null 2>&1; then
  source <(k9s completion bash) 2>/dev/null || true
fi
if command -v azcopy >/dev/null 2>&1; then
  source <(azcopy completion bash) 2>/dev/null || true
fi
if command -v gh >/dev/null 2>&1; then
  source <(gh completion -s bash) 2>/dev/null || true
fi
if command -v kind >/dev/null 2>&1; then
  source <(kind completion bash) 2>/dev/null || true
fi
if command -v k3d >/dev/null 2>&1; then
  source <(k3d completion bash) 2>/dev/null || true
fi
if command -v kustomize >/dev/null 2>&1; then
  source <(kustomize completion bash) 2>/dev/null || true
fi
if command -v kube-bench >/dev/null 2>&1; then
  source <(kube-bench completion bash) 2>/dev/null || true
fi
if command -v opa >/dev/null 2>&1; then
  source <(opa completion bash) 2>/dev/null || true
fi
if command -v regal >/dev/null 2>&1; then
  source <(regal completion bash) 2>/dev/null || true
fi
if command -v cilium >/dev/null 2>&1; then
  source <(cilium completion bash) 2>/dev/null || true
fi
if command -v oras >/dev/null 2>&1; then
  source <(oras completion bash) 2>/dev/null || true
fi

'';

  # Ensure login shells source ~/.bashrc so interactive settings and completions load
  home.file."/.profile".text = ''
README="~/.profile (managed by home.nix)"

# If this file was previously created by another tool, we still
# avoid re-sourcing ~/.bashrc multiple times in the same session.
if [ -n "$BASH_VERSION" ]; then
  # session guard to avoid duplicate sourcing
  if [ -z "$__HOME_BASHRC_SOURCED_BY_PROFILE" ]; then
    export __HOME_BASHRC_SOURCED_BY_PROFILE=1
    if [ -f "$HOME/.bashrc" ]; then
      . "$HOME/.bashrc"
    fi
  else
    # already sourced in this session, skip
    :
  fi
fi

'';
}
