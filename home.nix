{
  pkgs,
  username,
  nix-index-database,
  ...
}: let
  unstable-packages = with pkgs.unstable; [
    # cloud, k8s and CLI tools requested (from unstable)
    azure-cli
    azure-storage-azcopy
    git
    istioctl
    k6
    kubectl
    kubelogin
    kubernetes-helm
    kustomize
    kind
    k3d
    k9s
    kube-bench
    kubectx
    open-policy-agent
    fluxcd
    docker
    gh
    regal
    openssl
    cilium-cli
    oras
    sops
    step-cli
    trivy
    powershell
    # .NET development - use latest from unstable
    dotnetCorePackages.sdk_9_0-bin
    go
    nodejs_24
  ];

  stable-packages = with pkgs; [
    alejandra
    bat
    bottom
    cacert
    coreutils
    curl
    deadnix
    du-dust
    fd
    findutils
    fx
    gcc
    git-credential-manager
    git-crypt
    gnumake
    gnutar
    htop
    httpie
    just
    jq
    killall
    mkcert
    mosh
    neovim
    nil
    nodePackages.prettier
    nodePackages.vscode-langservers-extracted # html, css, json, eslint
    nodePackages.yaml-language-server
    procs
    ripgrep
    rsync
    sd
    shellcheck
    shfmt
    statix
    stern
    tmux
    tree
    unzip
    wget
    yamllint
    zip
  ];
in {
  imports = [
    nix-index-database.homeModules.nix-index
  ];

  home.stateVersion = "25.05";

  home = {
    username = "${username}";
    homeDirectory = "/home/${username}";

    sessionVariables.EDITOR = "nvim";
    # FIXME: set your preferred $SHELL
    sessionVariables.SHELL = "/etc/profiles/per-user/${username}/bin/bash";

    shell.enableBashIntegration = true;
  };

  home.packages =
    stable-packages
    ++ unstable-packages
    ++
    [
      # pkgs.some-package
      # pkgs.unstable.some-other-package
    ];

  programs = {
    home-manager.enable = true;
    nix-index.enable = true;
    nix-index-database.comma.enable = true;

    bash = {
      enable = true;
      enableCompletion = true;
      initExtra = ''
        if command -v kubectl >/dev/null 2>&1; then
          # generate and source the kubectl completion function, ignore errors
          source <(kubectl completion bash) 2>/dev/null || true
          complete -o default -F __start_kubectl k
        fi
      '';
      sessionVariables = {
        SSL_CERT_FILE = "${pkgs.cacert}/etc/ssl/certs/ca-bundle.crt";
        NODE_EXTRA_CA_CERTS = "${pkgs.cacert}/etc/ssl/certs/ca-bundle.crt";
      };
      shellAliases = {
        vi = "nvim";
        vim = "nvim";
        jvim = "nvim";
        lvim = "nvim";
        pbcopy = "/mnt/c/Windows/System32/clip.exe";
        pbpaste = "/mnt/c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe -command \"Get-Clipboard\"";
        explorer = "/mnt/c/Windows/explorer.exe";
        k = "kubectl";
      };
      
    };

    starship = {
      enable = true;
      settings = {
        azure.disabled = false;
        aws.disabled = true;
        gcloud.disabled = true;
        kubernetes.disabled = false;
        git_branch.style = "242";
        directory.style = "blue";
        directory.truncate_to_repo = false;
        directory.truncation_length = 8;
        python.disabled = true;
        ruby.disabled = true;
        hostname.ssh_only = false;
        hostname.style = "bold green";
      };
    };

    git = {
      enable = true;
      package = pkgs.unstable.git;
      delta.enable = true;
      delta.options = {
        line-numbers = true;
        side-by-side = true;
        navigate = true;
      };
      userEmail = "eric@example.com"; # FIXME: set your git email
      userName = "eric"; #FIXME: set your git username
      extraConfig = {
        push = {
          default = "current";
          autoSetupRemote = true;
        };
        merge = {
          conflictstyle = "diff3";
        };
        diff = {
          colorMoved = "default";
        };
      };
    };
  };

  # Create a basic ~/.bashrc with aliases and functions converted from the previous fish config
#   home.file."/.bashrc".text = ''
# # ~/.bashrc (generated by flake)
# export EDITOR="nvim"

# # Ensure Node/OpenSSL programs (VS Code server, node) find the CA bundle
# export SSL_CERT_FILE="${pkgs.cacert}/etc/ssl/certs/ca-bundle.crt"
# export NODE_EXTRA_CA_CERTS="${pkgs.cacert}/etc/ssl/certs/ca-bundle.crt"

# # Aliases
# alias vi='nvim'
# alias vim='nvim'
# alias jvim='nvim'
# alias lvim='nvim'
# alias pbcopy='/mnt/c/Windows/System32/clip.exe'
# alias pbpaste="/mnt/c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe -command \"Get-Clipboard\""
# alias explorer='/mnt/c/Windows/explorer.exe'
# alias k=kubectl
# complete -F __start_kubectl k

# # Functions
# refresh() { source "$HOME/.bashrc"; }
# take() { mkdir -p -- "$1" && cd -- "$1"; }
# ttake() { cd "$(mktemp -d)"; }
# show_path() { echo "$PATH" | tr ':' '\n'; }
# posix_source() {
#   while IFS= read -r i; do
#     IFS='=' read -r name val <<<"$i"
#     export "$name"="$val"
#   done < "$1"
# }

# # Load completions for installed tooling
# if command -v kubectl >/dev/null 2>&1; then
#   source <(kubectl completion bash) 2>/dev/null || true
# fi
# if command -v helm >/dev/null 2>&1; then
#   source <(helm completion bash) 2>/dev/null || true
# fi
# if command -v flux >/dev/null 2>&1; then
#   source <(flux completion bash) 2>/dev/null || true
# fi
# if command -v istioctl >/dev/null 2>&1; then
#   source <(istioctl completion bash) 2>/dev/null || true
# fi
# if command -v k9s >/dev/null 2>&1; then
#   source <(k9s completion bash) 2>/dev/null || true
# fi
# if command -v azcopy >/dev/null 2>&1; then
#   source <(azcopy completion bash) 2>/dev/null || true
# fi
# if command -v gh >/dev/null 2>&1; then
#   source <(gh completion -s bash) 2>/dev/null || true
# fi
# if command -v kind >/dev/null 2>&1; then
#   source <(kind completion bash) 2>/dev/null || true
# fi
# if command -v k3d >/dev/null 2>&1; then
#   source <(k3d completion bash) 2>/dev/null || true
# fi
# if command -v kustomize >/dev/null 2>&1; then
#   source <(kustomize completion bash) 2>/dev/null || true
# fi
# if command -v kube-bench >/dev/null 2>&1; then
#   source <(kube-bench completion bash) 2>/dev/null || true
# fi
# if command -v opa >/dev/null 2>&1; then
#   source <(opa completion bash) 2>/dev/null || true
# fi
# if command -v regal >/dev/null 2>&1; then
#   source <(regal completion bash) 2>/dev/null || true
# fi
# if command -v cilium >/dev/null 2>&1; then
#   source <(cilium completion bash) 2>/dev/null || true
# fi
# if command -v oras >/dev/null 2>&1; then
#   source <(oras completion bash) 2>/dev/null || true
# fi

# # Initialize starship prompt if installed
# if command -v starship >/dev/null 2>&1; then
#   # Prefer the eval form to set PS1 and other prompt internals for bash
#   eval "$(starship init bash)" 2>/dev/null || true
# fi

# '';

#   # Ensure login shells source ~/.bashrc so interactive settings and completions load
#   home.file."/.profile".text = ''
# README="~/.profile (managed by home.nix)"

# # If this file was previously created by another tool, we still
# # avoid re-sourcing ~/.bashrc multiple times in the same session.
# if [ -n "$BASH_VERSION" ]; then
#   # session guard to avoid duplicate sourcing
#   if [ -z "$__HOME_BASHRC_SOURCED_BY_PROFILE" ]; then
#     export __HOME_BASHRC_SOURCED_BY_PROFILE=1
#     if [ -f "$HOME/.bashrc" ]; then
#       . "$HOME/.bashrc"
#     fi
#   else
#     # already sourced in this session, skip
#     :
#   fi
# fi

# '';
}
